name: Reusable workflow example hello

on:
  workflow_call:
    inputs:
      hello:
        required: true
        type: string
      terraform_directory:
        description: 'Directory that holds Terraform code'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      terraform_directory:
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write

jobs: 
  terraform-plan-apply:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
#      with:
#        terraform_version: 1.1.9
#        terraform_wrapper: false
          
    - name: Terraform fmt
      id: fmt
      working-directory: ${{ inputs.terraform_directory  }}
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      working-directory: ${{ inputs.terraform_directory  }}
      run: terraform init
 
    - name: Terraform Validate
      id: validate
      working-directory: ${{ inputs.terraform_directory  }}
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      working-directory: ${{ inputs.terraform_directory  }}
      run: terraform plan -no-color

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ${{ inputs.terraform_directory  }}
      id: apply
#      run: terraform -auto-approve -no-color
      run: terraform plan -no-color

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>


          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: "./Backend/dev", Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

